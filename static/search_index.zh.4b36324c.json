[{"id":0,"title":"Core API","content":"#\n\nLinkPi Widget Core 是核心功能模块，提供了组件定义、配置和生命周期管理的核心 API。它是构建自定义组件的基础。\n\n\ndefineWidget#\n\n用于定义一个自定义组件。这是创建 LinkPi Widget 组件的核心 API，它定义了组件的所有基本属性、行为和生命周期。组件可以访问当前 Node\n的数据，并通过全局条件进行数据过滤。\n\n\n功能特点#\n\n * 类型安全：通过泛型支持完整的 TypeScript 类型推导\n * 生命周期管理：统一管理预览、设置、渲染三个阶段\n * 数据访问：可以访问当前 Node 的属性数据和关联的其他 Node\n * 全局条件：支持使用全局条件进行数据过滤\n * 节点导航：支持在不同 Node 间进行跳转\n\n\n基本用法#\n\n\n\n\n参数说明#\n\n * icon: 组件图标，用于在组件库中展示\n * basic: 基础配置\n   * 尺寸相关配置：\n     * defaultHeight: 默认高度，单位为网格（必填）。一个单位为 40px，必须为整数\n     * defaultWidth: 默认宽度，单位为网格（必填）。一个单位为容器宽度的 1/12，取值范围 1-12，必须为整数\n     * minWidth: 最小宽度限制，单位为网格。取值范围 1-12，必须为整数\n     * minHeight: 最小高度限制，单位为网格。一个单位为 40px，必须为整数\n     * maxWidth: 最大宽度限制，单位为网格。取值范围 1-12，必须为整数\n     * maxHeight: 最大高度限制，单位为网格。一个单位为 40px，必须为整数\n     * settingWidth: 设置面板宽度，单位为像素\n   * 行为相关配置：\n     * maxCount: 最大实例数量限制\n     * minCount: 最小实例数量限制\n     * deletable: 是否可删除\n     * movable: 是否可移动\n     * copyable: 是否可复制\n     * resizable: 是否可调整大小\n     * nested: 是否可嵌套\n     * dynamicHeight: 是否可以放入动态高度版块\n * metadata: 组件默认配置数据，会作为初始值传递给组件\n * preview: 预览组件，用于组件选择和布局编辑时的展示\n * setting: 设置组件，用于配置组件属性\n * render: 渲染组件，用于最终页面中的展示\n\n\ndefineWidgetConfig#\n\n用于定义组件的基本信息配置。这个配置文件通常位于组件根目录，用于声明组件的身份信息和基本配置。\n\n\n功能特点#\n\n * 组件标识：提供唯一的组件标识符\n * 组件信息：定义组件的基本信息\n * 配置校验：自动进行配置有效性验证\n\n\n基本用法#\n\n\n\n\n参数说明#\n\n * id: 组件的唯一标识符，在整个系统中必须唯一，建议使用有意义的英文标识\n * name: 组件的显示名称，用于在组件库、设置面板等界面上展示\n * comp_group: 组件分组名称，用于在组件库中对组件进行分类展示，可选参数\n\n\n使用建议#\n\n 1. 组件 ID 命名建议：\n    \n    * 使用有意义的英文名称\n    * 采用驼峰命名法\n    * 避免使用特殊字符\n    * 建议加入业务相关的前缀\n\n 2. 组件名称建议：\n    \n    * 使用清晰、具有描述性的名称\n    * 可以使用中文，使其更容易理解\n    * 建议在名称中体现组件的主要功能","routePath":"/linkpi-widget/api/core/","lang":"zh","toc":[{"text":"defineWidget","id":"definewidget","depth":2,"charIndex":70},{"text":"功能特点","id":"功能特点","depth":3,"charIndex":183},{"text":"基本用法","id":"基本用法","depth":3,"charIndex":338},{"text":"参数说明","id":"参数说明","depth":3,"charIndex":348},{"text":"defineWidgetConfig","id":"definewidgetconfig","depth":2,"charIndex":1089},{"text":"功能特点","id":"功能特点-1","depth":3,"charIndex":1160},{"text":"基本用法","id":"基本用法-1","depth":3,"charIndex":1226},{"text":"参数说明","id":"参数说明-1","depth":3,"charIndex":1236},{"text":"使用建议","id":"使用建议","depth":3,"charIndex":1364}],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"API 参考","content":"#\n\nLinkPi Widget 是一个用于构建可视化数据分析界面的组件库系统。它提供了一套完整的 API\n来处理主题（Node）、主题类型（Template）和可视化组件（Widget）。\n\n\n@mylinkpi/widget-react#\n\nReact 组件库，提供了一系列组件和 Hooks，用于帮助开发者在开发自定义组件时更好地集成连接派平台的功能。\n\n\n组件#\n\n * 组件 - 包含\n   DataSourceSettingWidgetSetting、GlobalConditionFilterItemSelect、NodeViewCompon\n   ent、TemplateSelect、ViewSelect 等组件，用于集成平台的数据源配置、全局筛选、节点视图等功能\n\n\nHooks#\n\n * Hooks - 提供了丰富的 Hooks API：\n   * 组件配置相关：useWidgetSetting、useWidgetSharedState\n   * 全局状态：useCurrentUser、useCurrentOrgId、usePiSDK\n   * 主题相关：useCurrentNode、useNodeTreeData、useJumpNode\n   * 主题类型相关：useTemplateList、useTempateInfo\n   * 全局条件：useGlobalConditions、useGlobalConditionFilterValue\n   * 其他工具：useUrlQuerys、useWidgetInstanceList 等\n\n所有组件和 Hooks 都使用了 React Context 来获取平台提供的功能，确保在使用时应用已正确配置必要的 Context Provider。\n\n\n@mylinkpi/widget-core#\n\n核心功能模块，提供了组件定义和配置的核心 API。\n\n * defineWidget - 定义自定义组件，包括预览、设置、渲染三个核心阶段\n * defineWidgetConfig - 定义组件的基本信息配置\n\n\n@mylinkpi/widget-cli#\n\n命令行工具，用于开发、构建和发布自定义组件。\n\n主要命令：\n\n * widget-cli dev - 启动本地开发模式，用于组件开发和调试\n * widget-cli build - 打包组件，生成可发布的组件包\n * widget-cli publish - 打包并上传组件到组件库\n * widget-cli info - 打印已上传的组件信息\n\n\n快速开始#\n\n\n安装依赖#\n\n\n\n\n基本概念#\n\n 1. Node（主题）：系统中的一条具体数据记录，每个 Node 都有其对应的模板类型（Template）。\n\n 2. Template（主题类型）：定义了 Node 的结构和行为，包含系统属性和自定义属性。\n\n 3. Widget（组件）：用于展示和操作 Node 数据的可视化组件，包含预览、设置、渲染三个核心阶段。\n\n 4. 全局条件：用于跨组件的数据过滤，可以影响多个组件的数据展示。\n\n详细的使用方法和示例请参考快速开始指南。","routePath":"/linkpi-widget/api/","lang":"zh","toc":[{"text":"@mylinkpi/widget-react","id":"mylinkpiwidget-react","depth":2,"charIndex":97},{"text":"组件","id":"组件","depth":3,"charIndex":181},{"text":"Hooks","id":"hooks","depth":3,"charIndex":343},{"text":"@mylinkpi/widget-core","id":"mylinkpiwidget-core","depth":2,"charIndex":763},{"text":"@mylinkpi/widget-cli","id":"mylinkpiwidget-cli","depth":2,"charIndex":895},{"text":"快速开始","id":"快速开始","depth":2,"charIndex":1095},{"text":"安装依赖","id":"安装依赖","depth":3,"charIndex":1103},{"text":"基本概念","id":"基本概念","depth":3,"charIndex":1113}],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"React 组件","content":"#\n\n@mylinkpi/widget-react 包提供了一系列组件，用于帮助开发者在开发自定义组件时更好地集成连接派平台的功能。\n\n\nDataSourceSettingWidgetSetting#\n\n数据源设置组件，用于在自定义组件中配置数据源。通过这个组件，你可以方便地接入连接派平台的数据服务。\n\n该组件会自动在组件配置中存入以下参数：\n\n * conditions - 数据源的筛选条件\n * type - 数据源类型\n\n\n参数#\n\n该组件不需要传入任何参数。\n\n\n使用示例#\n\n\n\n\nGlobalConditionFilterItemSelect#\n\n全局条件筛选项选择器组件，用于在自定义组件中集成连接派平台的全局筛选功能。\n\n\n参数#\n\n * value?: [string, string] - 当前选中的值，格式为 [筛选组件ID, 筛选项ID]\n * onChange?: (value?: [string, string]) => void - 选择变化时的回调函数\n\n\n使用示例#\n\n\n\n\nGlobalConditionFilterLink#\n\n> ⚠️ 注意：此组件已被标记为废弃（deprecated）\n\n全局条件筛选链接组件。\n\n\n参数#\n\n * id: string - 筛选器ID（必填）\n * onShowBtnClick?: () => void - 显示按钮点击时的回调函数\n\n\n使用示例#\n\n\n\n\nNodeViewComponent#\n\n节点视图组件，用于在自定义组件中展示和操作连接派平台的节点内容。\n\n\n参数#\n\n * nodeId: string - 节点ID（必填）\n * viewId: string - 视图ID（必填）\n\n\n使用示例#\n\n\n\n\nTemplateSelect#\n\n模板选择器组件，用于在自定义组件中集成连接派平台的模板选择功能。\n\n\n参数#\n\n * value?: string - 当前选中的模板ID\n * onChange?: (value?: string) => void - 选择变化时的回调函数\n\n\n使用示例#\n\n\n\n\nViewSelect#\n\n视图选择器组件，用于在自定义组件中集成连接派平台的视图选择功能。\n\n\n参数#\n\n * value: string - 当前选中的视图ID（必填）\n * onChange?: (value?: string, option?: { value: string; label: string; nodeId:\n   string }) => void - 选择变化时的回调函数\n\n\n使用示例#\n\n\n\n--------------------------------------------------------------------------------\n\n注意：这些组件都是为了帮助你的自定义组件更好地与连接派平台进行集成。它们都使用了 React Context\n来获取平台提供的功能，因此确保在使用这些组件时，你的应用已经正确配置了必要的 Context Provider。如果你想了解如何定义一个完整的自定义组件，请参考\n核心 API 文档。","routePath":"/linkpi-widget/api/react/components","lang":"zh","toc":[{"text":"DataSourceSettingWidgetSetting","id":"datasourcesettingwidgetsetting","depth":2,"charIndex":68},{"text":"参数","id":"参数","depth":3,"charIndex":216},{"text":"使用示例","id":"使用示例","depth":3,"charIndex":237},{"text":"GlobalConditionFilterItemSelect","id":"globalconditionfilteritemselect","depth":2,"charIndex":247},{"text":"参数","id":"参数-1","depth":3,"charIndex":321},{"text":"使用示例","id":"使用示例-1","depth":3,"charIndex":447},{"text":"GlobalConditionFilterLink","id":"globalconditionfilterlink","depth":2,"charIndex":457},{"text":"参数","id":"参数-2","depth":3,"charIndex":531},{"text":"使用示例","id":"使用示例-2","depth":3,"charIndex":610},{"text":"NodeViewComponent","id":"nodeviewcomponent","depth":2,"charIndex":620},{"text":"参数","id":"参数-3","depth":3,"charIndex":675},{"text":"使用示例","id":"使用示例-3","depth":3,"charIndex":740},{"text":"TemplateSelect","id":"templateselect","depth":2,"charIndex":750},{"text":"参数","id":"参数-4","depth":3,"charIndex":802},{"text":"使用示例","id":"使用示例-4","depth":3,"charIndex":891},{"text":"ViewSelect","id":"viewselect","depth":2,"charIndex":901},{"text":"参数","id":"参数-5","depth":3,"charIndex":949},{"text":"使用示例","id":"使用示例-5","depth":3,"charIndex":1103}],"domain":"","frontmatter":{},"version":""},{"id":3,"title":"React Hooks","content":"#\n\n\n组件配置相关#\n\n\nuseWidgetSetting#\n\n获取和更新组件的配置信息。\n\n\n\n\nuseWidgetSharedState#\n\n访问和管理组件间的共享状态。\n\n\n\n\n全局状态和功能#\n\n\nuseCurrentUser#\n\n获取当前用户信息。\n\n\n\n\nuseCurrentOrgId#\n\n获取当前空间 ID。\n\n\n\n\nusePiSDK#\n\n获取 Pi SDK 实例。详细的 SDK API 文档请参考 PiSDK API 文档。\n\n\n\n\n主题（Node）相关#\n\n\nuseCurrentNode#\n\n获取当前主题（Node）信息。\n\n\n\n\nuseNodeTreeData#\n\n获取主题树数据。\n\n\n\n\nuseJumpNode#\n\n用于主题间跳转。\n\n\n\n\n主题类型（Template）相关#\n\n\nuseTemplateList#\n\n获取主题类型列表。\n\n\n\n\nuseTempateInfo#\n\n获取特定主题类型信息。\n\n\n\n\n全局条件#\n\n\nuseGlobalConditions#\n\n获取全局条件配置。\n\n\n\n\nuseGlobalConditionFilterValue#\n\n获取特定全局条件的过滤值。\n\n\n\n\nuseAllGlobalConditionFilterValue#\n\n获取所有全局条件的过滤值。\n\n\n\n\n认证相关#\n\n\nuseSSOToken#\n\n获取和管理 SSO 令牌。\n\n\n\n\n其他工具#\n\n\nuseUrlQuerys#\n\n获取 URL 查询参数。\n\n\n\n\nuseNodeContentModalClose#\n\n获取关闭节点内容弹窗的方法。\n\n\n\n\nuseWidgetInstanceList#\n\n获取所有组件实例列表。\n\n\n\n\nuseWidgetInstancesByWidgetId#\n\n根据组件类型 ID 获取对应的组件实例列表。\n\n\n\n\nuseSetExtraGlobalConditions#\n\n设置组件的额外全局筛选条件。\n\n","routePath":"/linkpi-widget/api/react/hooks","lang":"zh","toc":[{"text":"组件配置相关","id":"组件配置相关","depth":2,"charIndex":3},{"text":"useWidgetSetting","id":"usewidgetsetting","depth":3,"charIndex":13},{"text":"useWidgetSharedState","id":"usewidgetsharedstate","depth":3,"charIndex":50},{"text":"全局状态和功能","id":"全局状态和功能","depth":2,"charIndex":92},{"text":"useCurrentUser","id":"usecurrentuser","depth":3,"charIndex":103},{"text":"useCurrentOrgId","id":"usecurrentorgid","depth":3,"charIndex":134},{"text":"usePiSDK","id":"usepisdk","depth":3,"charIndex":167},{"text":"主题（Node）相关","id":"主题node相关","depth":2,"charIndex":227},{"text":"useCurrentNode","id":"usecurrentnode","depth":3,"charIndex":241},{"text":"useNodeTreeData","id":"usenodetreedata","depth":3,"charIndex":278},{"text":"useJumpNode","id":"usejumpnode","depth":3,"charIndex":309},{"text":"主题类型（Template）相关","id":"主题类型template相关","depth":2,"charIndex":336},{"text":"useTemplateList","id":"usetemplatelist","depth":3,"charIndex":356},{"text":"useTempateInfo","id":"usetempateinfo","depth":3,"charIndex":388},{"text":"全局条件","id":"全局条件","depth":2,"charIndex":421},{"text":"useGlobalConditions","id":"useglobalconditions","depth":3,"charIndex":429},{"text":"useGlobalConditionFilterValue","id":"useglobalconditionfiltervalue","depth":3,"charIndex":465},{"text":"useAllGlobalConditionFilterValue","id":"useallglobalconditionfiltervalue","depth":3,"charIndex":515},{"text":"认证相关","id":"认证相关","depth":2,"charIndex":568},{"text":"useSSOToken","id":"usessotoken","depth":3,"charIndex":576},{"text":"其他工具","id":"其他工具","depth":2,"charIndex":608},{"text":"useUrlQuerys","id":"useurlquerys","depth":3,"charIndex":616},{"text":"useNodeContentModalClose","id":"usenodecontentmodalclose","depth":3,"charIndex":648},{"text":"useWidgetInstanceList","id":"usewidgetinstancelist","depth":3,"charIndex":694},{"text":"useWidgetInstancesByWidgetId","id":"usewidgetinstancesbywidgetid","depth":3,"charIndex":734},{"text":"useSetExtraGlobalConditions","id":"usesetextraglobalconditions","depth":3,"charIndex":792}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"Pi SDK","content":"#\n\nPi SDK 是连接派平台提供的核心 SDK，用于与平台进行交互。你可以通过 React Hook usePiSDK 来获取 SDK 实例。\n\n\n核心方法#\n\n\nupdateNodeProp#\n\n更新节点属性。\n\n\n\n\naddNode#\n\n添加新节点。该方法由 PiNodeManager 提供，用于创建新的节点。\n\n\n\n\ngetDbNodeList#\n\n获取数据库节点列表。\n\n\n\n\ngetNodeList#\n\n> ⚠️ 注意：此方法仅用于调试和演示，生产环境请使用 getDbNodeList 进行节点查询。\n\n获取节点列表。\n\n\n\n\n使用示例#\n\n\n\n--------------------------------------------------------------------------------\n\n注意：\n\n 1. 所有的异步方法都返回 Promise，在使用时需要通过 await 或者 .then() 来获取结果。\n 2. getNodeList 方法仅用于调试和演示，在生产环境中应使用 getDbNodeList 进行节点查询。","routePath":"/linkpi-widget/api/sdk/pi-sdk","lang":"zh","toc":[{"text":"核心方法","id":"核心方法","depth":2,"charIndex":75},{"text":"updateNodeProp","id":"updatenodeprop","depth":3,"charIndex":83},{"text":"addNode","id":"addnode","depth":3,"charIndex":112},{"text":"getDbNodeList","id":"getdbnodelist","depth":3,"charIndex":164},{"text":"getNodeList","id":"getnodelist","depth":3,"charIndex":195},{"text":"使用示例","id":"使用示例","depth":2,"charIndex":272}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"快速开始","content":"#\n\n本指南将帮助你快速上手 LinkPi Widget，并创建你的第一个可嵌入组件。\n\n\n安装#\n\n使用你喜欢的包管理器安装所需的依赖包：\n\n\n\n\n项目结构#\n\n创建一个基本的项目结构如下：\n\n\n\n\n配置文件#\n\n首先创建 widget.config.js 文件来定义组件的基本信息：\n\n\n\n\n组件开发#\n\n在 src/index.tsx 中创建你的组件：\n\n\n\n\n开发命令#\n\n开发和部署你的组件：\n\n\n\n\n下一步#\n\n * 查看 API 文档 了解更多功能\n * 探索 示例 获取灵感\n * 加入我们的 社区 讨论","routePath":"/linkpi-widget/guide/getting-started","lang":"zh","toc":[{"text":"安装","id":"安装","depth":2,"charIndex":45},{"text":"项目结构","id":"项目结构","depth":2,"charIndex":74},{"text":"配置文件","id":"配置文件","depth":3,"charIndex":100},{"text":"组件开发","id":"组件开发","depth":3,"charIndex":147},{"text":"开发命令","id":"开发命令","depth":2,"charIndex":183},{"text":"下一步","id":"下一步","depth":2,"charIndex":205}],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"介绍","content":"#\n\nLinkPi Widget 是一个用于构建可视化配置的组件开发框架。它主要用于开发可在 LinkPi 平台中使用的自定义组件。\n\n\n组件示例#\n\n\n\n\n\n如上图所示，每个组件包含三个主要部分：\n\n * 预览区：展示组件在页面中的预览效果\n * 设置面板：用于配置组件的属性和数据\n * 渲染视图：最终在页面中渲染的实际内容\n\n\n主要功能#\n\n * 可视化配置：通过设置面板轻松配置组件属性\n * 实时预览：即时查看组件效果\n * 数据联动：支持组件间的数据共享和通信\n\n\n技术架构#\n\n框架由以下几个核心包组成：\n\n * @mylinkpi/widget-core: 提供基础的组件定义和运行环境\n * @mylinkpi/widget-react: React 组件库和开发工具\n * @mylinkpi/widget-cli: 开发、构建和发布工具\n\n\n下一步#\n\n * 快速开始 - 开始开发你的第一个组件\n * API 参考 - 查看详细的 API 文档","routePath":"/linkpi-widget/guide/","lang":"zh","toc":[{"text":"组件示例","id":"组件示例","depth":2,"charIndex":68},{"text":"主要功能","id":"主要功能","depth":2,"charIndex":166},{"text":"技术架构","id":"技术架构","depth":2,"charIndex":238},{"text":"下一步","id":"下一步","depth":2,"charIndex":381}],"domain":"","frontmatter":{},"version":""}]