"use strict";(self.webpackChunk_linkpi_docs=self.webpackChunk_linkpi_docs||[]).push([["431"],{611:function(e,n,i){i.r(n),i.d(n,{default:function(){return a}});var t=i(1549),d=i(6603);function r(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",ul:"ul",li:"li",h3:"h3",pre:"pre",blockquote:"blockquote",hr:"hr"},(0,d.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"react-组件",children:["React 组件",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#react-组件",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"@mylinkpi/widget-react"})," 包提供了一系列组件，用于帮助开发者在开发自定义组件时更好地集成连接派平台的功能。"]}),"\n",(0,t.jsxs)(n.h2,{id:"datasourcesettingwidgetsetting",children:["DataSourceSettingWidgetSetting",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#datasourcesettingwidgetsetting",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"数据源设置组件，用于在自定义组件中配置数据源。通过这个组件，你可以方便地接入连接派平台的数据服务。"}),"\n",(0,t.jsx)(n.p,{children:"该组件会自动在组件配置中存入以下参数："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"conditions"})," - 数据源的筛选条件"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"type"})," - 数据源类型"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"参数",children:["参数",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参数",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"该组件不需要传入任何参数。"}),"\n",(0,t.jsxs)(n.h3,{id:"使用示例",children:["使用示例",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用示例",children:"#"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { DataSourceSettingWidgetSetting } from '@mylinkpi/widget-react';\n\nfunction YourComponent() {\n  return (\n    <div>\n      <DataSourceSettingWidgetSetting />\n    </div>\n  );\n}\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"globalconditionfilteritemselect",children:["GlobalConditionFilterItemSelect",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#globalconditionfilteritemselect",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"全局条件筛选项选择器组件，用于在自定义组件中集成连接派平台的全局筛选功能。"}),"\n",(0,t.jsxs)(n.h3,{id:"参数-1",children:["参数",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参数-1",children:"#"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"value?: [string, string]"})," - 当前选中的值，格式为 [筛选组件ID, 筛选项ID]"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onChange?: (value?: [string, string]) => void"})," - 选择变化时的回调函数"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"使用示例-1",children:["使用示例",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用示例-1",children:"#"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { GlobalConditionFilterItemSelect } from '@mylinkpi/widget-react';\n\nfunction YourComponent() {\n  const handleChange = (value?: [string, string]) => {\n    console.log('选中的值:', value);\n    // value[0] 是筛选组件的ID\n    // value[1] 是筛选项的ID\n  };\n\n  return (\n    <GlobalConditionFilterItemSelect\n      value={['filterComponentId', 'filterItemId']}\n      onChange={handleChange}\n    />\n  );\n}\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"globalconditionfilterlink",children:["GlobalConditionFilterLink",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#globalconditionfilterlink",children:"#"})]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"⚠️ 注意：此组件已被标记为废弃（deprecated）"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"全局条件筛选链接组件。"}),"\n",(0,t.jsxs)(n.h3,{id:"参数-2",children:["参数",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参数-2",children:"#"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"id: string"})," - 筛选器ID（必填）"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onShowBtnClick?: () => void"})," - 显示按钮点击时的回调函数"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"使用示例-2",children:["使用示例",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用示例-2",children:"#"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { GlobalConditionFilterLink } from '@mylinkpi/widget-react';\n\nfunction YourComponent() {\n  const handleClick = () => {\n    console.log('按钮被点击');\n  };\n\n  return (\n    <GlobalConditionFilterLink\n      id=\"filter123\"\n      onShowBtnClick={handleClick}\n    />\n  );\n}\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"nodeviewcomponent",children:["NodeViewComponent",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#nodeviewcomponent",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"节点视图组件，用于在自定义组件中展示和操作连接派平台的节点内容。"}),"\n",(0,t.jsxs)(n.h3,{id:"参数-3",children:["参数",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参数-3",children:"#"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"nodeId: string"})," - 节点ID（必填）"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"viewId: string"})," - 视图ID（必填）"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"使用示例-3",children:["使用示例",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用示例-3",children:"#"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { NodeViewComponent } from \'@mylinkpi/widget-react\';\n\nfunction YourComponent() {\n  return (\n    <NodeViewComponent\n      nodeId="node123"\n      viewId="view456"\n    />\n  );\n}\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"templateselect",children:["TemplateSelect",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#templateselect",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"模板选择器组件，用于在自定义组件中集成连接派平台的模板选择功能。"}),"\n",(0,t.jsxs)(n.h3,{id:"参数-4",children:["参数",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参数-4",children:"#"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"value?: string"})," - 当前选中的模板ID"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onChange?: (value?: string) => void"})," - 选择变化时的回调函数"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"使用示例-4",children:["使用示例",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用示例-4",children:"#"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { TemplateSelect } from '@mylinkpi/widget-react';\n\nfunction YourComponent() {\n  const handleChange = (value?: string) => {\n    console.log('选中的模板:', value);\n  };\n\n  return (\n    <TemplateSelect\n      value=\"template123\"\n      onChange={handleChange}\n    />\n  );\n}\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"viewselect",children:["ViewSelect",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#viewselect",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"视图选择器组件，用于在自定义组件中集成连接派平台的视图选择功能。"}),"\n",(0,t.jsxs)(n.h3,{id:"参数-5",children:["参数",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参数-5",children:"#"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"value: string"})," - 当前选中的视图ID（必填）"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onChange?: (value?: string, option?: { value: string; label: string; nodeId: string }) => void"})," - 选择变化时的回调函数"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"使用示例-5",children:["使用示例",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用示例-5",children:"#"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { ViewSelect } from '@mylinkpi/widget-react';\n\nfunction YourComponent() {\n  const handleChange = (value?: string, option?: { value: string; label: string; nodeId: string }) => {\n    console.log('选中的视图:', value);\n    console.log('视图详情:', option);\n  };\n\n  return (\n    <ViewSelect\n      value=\"view123\"\n      onChange={handleChange}\n    />\n  );\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["注意：这些组件都是为了帮助你的自定义组件更好地与连接派平台进行集成。它们都使用了 React Context 来获取平台提供的功能，因此确保在使用这些组件时，你的应用已经正确配置了必要的 Context Provider。如果你想了解如何定义一个完整的自定义组件，请参考 ",(0,t.jsx)(n.a,{href:"/api/core/index",children:"核心 API 文档"}),"。"]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}let a=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["api%2Freact%2Fcomponents.md"]={toc:[{text:"DataSourceSettingWidgetSetting",id:"datasourcesettingwidgetsetting",depth:2},{text:"参数",id:"参数",depth:3},{text:"使用示例",id:"使用示例",depth:3},{text:"GlobalConditionFilterItemSelect",id:"globalconditionfilteritemselect",depth:2},{text:"参数",id:"参数-1",depth:3},{text:"使用示例",id:"使用示例-1",depth:3},{text:"GlobalConditionFilterLink",id:"globalconditionfilterlink",depth:2},{text:"参数",id:"参数-2",depth:3},{text:"使用示例",id:"使用示例-2",depth:3},{text:"NodeViewComponent",id:"nodeviewcomponent",depth:2},{text:"参数",id:"参数-3",depth:3},{text:"使用示例",id:"使用示例-3",depth:3},{text:"TemplateSelect",id:"templateselect",depth:2},{text:"参数",id:"参数-4",depth:3},{text:"使用示例",id:"使用示例-4",depth:3},{text:"ViewSelect",id:"viewselect",depth:2},{text:"参数",id:"参数-5",depth:3},{text:"使用示例",id:"使用示例-5",depth:3}],title:"React 组件",headingTitle:"React 组件",frontmatter:{}}}}]);