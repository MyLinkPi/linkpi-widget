"use strict";(self.webpackChunk_linkpi_docs=self.webpackChunk_linkpi_docs||[]).push([["523"],{1714:function(e,n,d){d.r(n),d.d(n,{default:function(){return a}});var i=d(1549),r=d(6603);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",h3:"h3",pre:"pre",blockquote:"blockquote",hr:"hr",ol:"ol",li:"li"},(0,r.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"pi-sdk",children:["Pi SDK",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#pi-sdk",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Pi SDK 是连接派平台提供的核心 SDK，用于与平台进行交互。你可以通过 React Hook ",(0,i.jsx)(n.code,{children:"usePiSDK"})," 来获取 SDK 实例。"]}),"\n",(0,i.jsxs)(n.h2,{id:"核心方法",children:["核心方法",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#核心方法",children:"#"})]}),"\n",(0,i.jsxs)(n.h3,{id:"updatenodeprop",children:["updateNodeProp",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#updatenodeprop",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"更新节点属性。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface UpdateNodePropParams {\n  orgId: string;      // 空间 ID\n  nodeId: string;     // 节点 ID\n  index: number[];    // 属性索引\n  value: any[];       // 属性值\n}\n\nupdateNodeProp(params: UpdateNodePropParams): Promise<void>\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"addnode",children:["addNode",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#addnode",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["添加新节点。该方法由 ",(0,i.jsx)(n.code,{children:"PiNodeManager"})," 提供，用于创建新的节点。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'interface AddNodeParams {\n  /**\n   * 空间ID\n   */\n  orgId: string;\n\n  /**\n   * 主题类型ID，用于指定新节点的类型\n   */\n  templateId: string;\n\n  /**\n   * 节点属性值\n   */\n  initialProps: {\n    [propIndex: number /** 属性索引 */]: any[] /** 属性值 */\n  };\n\n  /**\n   * 父节点ID（可选）\n   * 如果指定了父节点，新节点将作为其子节点创建\n   */\n  parentId?: string;\n\n  /**\n   * 插入位置索引（可选）\n   * 用于指定在父节点的子节点列表中的插入位置\n   */\n  index?: number;\n}\n\naddNode(...args: Parameters<PiNodeManager["addNode"]>): Promise<void>\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"getdbnodelist",children:["getDbNodeList",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getdbnodelist",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"获取数据库节点列表。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface GetDbNodeListParams {\n  pageSize: number;\n  page: number;\n  orgId: string;\n  condition: ViewList.ViewconditionV2;\n  thmId?: string;  // 指定表头映射 id\n  /**\n   * API 数据源自定义参数\n   */\n  reqParams?: APIDataSourceParams;\n  /**\n   * @deprecated\n   *\n   * 废弃的匹配设置\n   */\n  matchings?: {\n    origin?: number;\n    target?: number;\n    key: string;\n  }[];\n  currentNodeId?: string;\n}\n\ninterface GetDbNodeListResult {\n  status: string;\n  result: TemplateNodeData[];\n  total: number;\n  page: number;\n  // 其他返回字段\n}\n\ngetDbNodeList(params: GetDbNodeListParams): Promise<GetDbNodeListResult>\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"getnodelist",children:["getNodeList",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getnodelist",children:"#"})]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["⚠️ 注意：此方法仅用于调试和演示，生产环境请使用 ",(0,i.jsx)(n.code,{children:"getDbNodeList"})," 进行节点查询。"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"获取节点列表。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface GetNodeListParams {\n  condition: any;\n  orgId: string;\n  page: number;\n  pageSize: number;\n}\n\ngetNodeList(params: GetNodeListParams): Promise<TemplateNodeData[]>\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"使用示例",children:["使用示例",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用示例",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { usePiSDK } from "@mylinkpi/widget-react";\n\nfunction YourComponent() {\n  const sdk = usePiSDK();\n\n  // 更新节点属性\n  await sdk.updateNodeProp({\n    orgId: "org-id",\n    nodeId: "node-id",\n    index: [0], // 更新第一个属性\n    value: ["新值"], // 设置新的属性值\n  });\n\n  // 获取节点列表\n  const nodes = await sdk.getDbNodeList({\n    pageSize: 10,\n    page: 1,\n    orgId: "org-id",\n    condition: [\n      // 查询条件\n    ],\n    type: "conditionFilterV2",\n  });\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"注意："}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["所有的异步方法都返回 Promise，在使用时需要通过 ",(0,i.jsx)(n.code,{children:"await"})," 或者 ",(0,i.jsx)(n.code,{children:".then()"})," 来获取结果。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"getNodeList"})," 方法仅用于调试和演示，在生产环境中应使用 ",(0,i.jsx)(n.code,{children:"getDbNodeList"})," 进行节点查询。"]}),"\n"]})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(s,{...e})}):s(e)}let a=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["api%2Fsdk%2Fpi-sdk.md"]={toc:[{text:"核心方法",id:"核心方法",depth:2},{text:"updateNodeProp",id:"updatenodeprop",depth:3},{text:"addNode",id:"addnode",depth:3},{text:"getDbNodeList",id:"getdbnodelist",depth:3},{text:"getNodeList",id:"getnodelist",depth:3},{text:"使用示例",id:"使用示例",depth:2}],title:"Pi SDK",headingTitle:"Pi SDK",frontmatter:{}}}}]);